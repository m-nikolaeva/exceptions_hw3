package Data;
/* Напишите приложение, которое будет запрашивать у пользователя следующие данные в произвольном порядке, разделенные пробелом:
Фамилия Имя Отчество датарождения номертелефона пол
Форматы данных:
фамилия, имя, отчество - строки
дата_рождения - строка формата dd.mm.yyyy
номер_телефона - целое беззнаковое число без форматирования
пол - символ латиницей f или m.
Приложение должно проверить введенные данные по количеству. 
Если количество не совпадает с требуемым, вернуть код ошибки, обработать его и показать пользователю сообщение, 
что он ввел меньше и больше данных, чем требуется.
Приложение должно попытаться распарсить полученные значения и выделить из них требуемые параметры. 
Если форматы данных не совпадают, нужно бросить исключение, соответствующее типу проблемы. 
Можно использовать встроенные типы java и создать свои. Исключение должно быть корректно обработано, 
пользователю выведено сообщение с информацией, что именно неверно.
Если всё введено и обработано верно, должен создаться файл с названием, равным фамилии, 
в него в одну строку должны записаться полученные данные, вида:
<Фамилия><Имя><Отчество><датарождения> <номертелефона><пол>
Однофамильцы должны записаться в один и тот же файл, в отдельные строки.
Не забудьте закрыть соединение с файлом.
При возникновении проблемы с чтением-записью в файл, исключение должно быть корректно обработано, пользователь должен увидеть стектрейс ошибки. */

import java.util.Scanner;

import static Data.CreateStringRecord.createStringRecord;
import static Data.WritePeopleInFiles.writeLineFile;
import static Data.checkInputData.*;

public class FinalTaskExc {
    public static void main(String[] args) {

        String pathDB = "C:\\_GB\\01. Семестр\\Исключения\\HW_Exception\\src\\com\\DBPeople\\DB\\"; // путь к БД

        System.out.println("введите данные (в любом порядке через пробел): \n "
                + " \"Фамилия Имя Отчество, дату рождения (dd.mm.yyyy), номер телефона(только цифры), пол(f/m)\"");
//Ivanov Ivan Petr m 12.12.1922 123456789
        Scanner scanner = new Scanner(System.in);
        recordPersonalData(scanner.nextLine(), pathDB);
        scanner.close();
    }

    public static void recordPersonalData(String dataPeople, String pathDB) {
        checkInputData(dataPeople);//проверить кол-во введенных данных
        String currentData = createStringRecord(dataPeople);// соберем строку для записи в нужном формате
        writeLineFile(currentData, pathDB); // запись строки (линии) в файл
    }

    public static void checkInputData(String dataPeople) {
        emptyStringException(dataPeople) ; //проверка что строка непустая
        countInputException(dataPeople); // проверка что данных достаточно
    }

}